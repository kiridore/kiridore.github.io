<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>『置顶』如何食用本博客</title>
    <link href="/2022/06/19/%E5%A6%82%E4%BD%95%E9%A3%9F%E7%94%A8%E6%9C%AC%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/06/19/%E5%A6%82%E4%BD%95%E9%A3%9F%E7%94%A8%E6%9C%AC%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>对这个博客少得可怜的文章进行分类，方便找到你需要的内容</p><span id="more"></span><p>首先，再次（如果你在之前看过这个博客的<a href="https://kiridore.github.io/about/">关于页面</a>的话）感谢你访问这个互联网边缘的小站（因为谷歌都搜索不到我），下面是一些关于本站文章分类的介绍，你可以在<a href="https://kiridore.github.io/categories/">文章分类页</a>中看到它们，方便找到你最想看的部分</p><hr><p>文章主要分为以下几个大类，不排除未来还会继续增加。同时所有无法归为子分类的文章，都会被单独的放在大类中，可以理解成没有子分类就全是杂文。</p><ul><li>技术<blockquote><p>主要写一些在工作和自己研究中学习到的知识，或者是一些工具的使用方法，实用性较强，尽力写成教程形式方便理解。包括多个子分类</p></blockquote><ul><li>博客<blockquote><p>专门保存我在搭建这个博客时学习到的各类知识与方法</p></blockquote></li><li>游戏引擎<blockquote><p>文如其名 </p></blockquote></li><li>Verilog<blockquote><p>记录我为了工作学习Verilog的一些内容，未来大概率不会更新</p></blockquote></li></ul></li><li>绘画<blockquote><p>保存我过去，现在以及未来，已经学到或未来将会学到的关于绘画的知识，并整理为类似教学的文章，大概率没有子分类</p></blockquote></li><li>读书<blockquote><p>这里保存我在读书过程中做的笔记，或者读书中的一些感(废)悟(话)。个人觉得这个分类里的大概率没什么阅读价值，看看封面和标题就行了，毕竟可能需要恰巧和我读同一本书，才可能有看的价值。</p></blockquote></li></ul><p>最后，祝你在这个小站里玩得愉快，如果觉得不错，也可以分享给你的朋友。</p><!-- markdownlint-disable MD041 MD002-->]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何使用Anki来高效的学习</title>
    <link href="/2022/06/19/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Anki%E6%9D%A5%E9%AB%98%E6%95%88%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/06/19/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Anki%E6%9D%A5%E9%AB%98%E6%95%88%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>点击阅读前文前, 首页能看到的文章的简短描述</p><span id="more"></span><h2 id="修改日志"><a href="#修改日志" class="headerlink" title="修改日志"></a>修改日志</h2><table><thead><tr><th>日期</th><th>内容</th></tr></thead><tbody><tr><td></td><td>创建文档</td></tr></tbody></table><!-- markdownlint-disable MD041 MD002-->]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基本功前的基本功-绘画中的观察</title>
    <link href="/2022/03/31/%E5%9F%BA%E6%9C%AC%E5%8A%9F%E5%89%8D%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8A%9F-%E7%BB%98%E7%94%BB%E4%B8%AD%E7%9A%84%E8%A7%82%E5%AF%9F/"/>
    <url>/2022/03/31/%E5%9F%BA%E6%9C%AC%E5%8A%9F%E5%89%8D%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8A%9F-%E7%BB%98%E7%94%BB%E4%B8%AD%E7%9A%84%E8%A7%82%E5%AF%9F/</url>
    
    <content type="html"><![CDATA[<p>当你决心提起画笔认真的练习绘画时，第一个摆在你面前的问题可能不是如何画出细致的光影和完美的形体，而是如何把画得和你看到的一样，而这也将是一切绘画的基础。</p><span id="more"></span><h1 id="基本功前的基本功"><a href="#基本功前的基本功" class="headerlink" title="基本功前的基本功"></a>基本功前的基本功</h1><h2 id="修改日志"><a href="#修改日志" class="headerlink" title="修改日志"></a>修改日志</h2><table><thead><tr><th>日期</th><th>内容</th></tr></thead><tbody><tr><td>2022-3-31</td><td>完成了正文框架</td></tr><tr><td>2022-6-18</td><td>对正文进行修缮，删除了“色准”章节</td></tr></tbody></table><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><pre><code>给自己长篇累牍的废话找一个开头</code></pre><p>在我学画画时，曾经特别喜欢纠缠老师问一个问题——“究竟什么是基本功”。当时我的老师告诉我，他认为的基本功并不是流畅的排线或者精准的光影，而是</p><blockquote><p>画万物能像万物的能力</p></blockquote><p>虽然这个回答确实有不说人话的成分在里面，本质其实在说<strong>你需要能让你画出的东西与你所见的一致</strong>。这里掺一句题外话，为什么不是“所想”而是“所见”的东西。事实上人是无法画出自己没有见过的东西的，任何的创作，即便是原创，都是建立在作者生活中的所见所闻上的。不过这就是另一个关于“寻找参考”的话题了，这里先挖坑，具体放到下次再说。</p><p>这个时候就会有一个很经典的问题</p><blockquote><p>画的一模一样的写实画派已经被照相机淘汰了，我为什么还要追求像相机一样准确</p></blockquote><p>在个人理解中，练习中画的一模一样并不是目的，而是手段。进行画到一模一样的练习也是为了让手眼能够一致，为未来的学习积累基础。保证在进行临摹学习他人画法时不会因为过多时间都在调整形体，学习色彩时不会因为取不准色而失去练习效果等等。实际上也是变相的加速未来的学习速度。</p><p>这样看来，不仅手上需要练习，眼睛的能力也同要重要。而对于观察能力的练习，或许你也曾今听说过“抓型”练习，这也就是坊间练习型准最简单的方法。</p><h2 id="型准"><a href="#型准" class="headerlink" title="型准"></a>型准</h2><pre><code>这临摹有什么特别的，居然还有脸写一篇这么长的文字来浪费大家时间。</code></pre><p>练习抓型，也叫他打型，这个名字看着神秘，其实也就是我们常说的“临摹”。作为传统美术也会进行的练习，它看起来简单，但其中有不少细节值得注意，不然很容易变成无脑临摹失去练习型准的意义。但现在这里我们完全不考虑它到底什么操作细节，直接快进到提笔画画这部分。</p><div class="note note-success">            <p><strong>TIP</strong><br>一般来讲，临摹是学习初期最快的一种方法，<strong>而型准就是能有效吸收这一切的基础</strong>。</p>          </div><p>这里展示一个之前做的抓型练习。最简单最直接的练习就是打开一个1：1的画布，画一个一模一样的出来（传统美术就要比这个难多了，你只能把要画的东西缩印在一张纸上贴在自己的画架旁边画）。最开始的时候，大可以不考虑步骤上的需求，直接动手开干，唯一的要求就是只靠<strong>自己的眼力</strong>以画到100%为目标。稍微练习一周两周，再去看具体的步骤教学，更能发现自己练习时的问题。</p><p><img src="/img/drawbase/example.png"></p><div class="note note-success">            <p><strong>TIP</strong><br>根据难度从易到难</p><ul><li>美式卡通 &lt; 日式二次元 &lt; 照片 &lt; 厚涂</li></ul>          </div><p>总之边缘越清晰，形状越简单的，相对来说难度会越小。很多朋友上来就说我要临摹照片！或者我要临摹厚涂大佬的图！基本上这种就等于空装备打Boss，不是天赋异禀估计被打的细碎。</p><p>当然在各大类里面肯定也会有一个难度细分，初期一般建议就选择这样的图<br><img src="/img/drawbase/pic.png"><br>线条清晰内容简单，也不算太丑（选的图太丑画起来也痛苦不是，还会顺便拉低审美）。</p><p>随着<strong>练习量</strong>和<strong>知识储备</strong>的增加，观察和型准将会化作你的被动技能，他会化为一种本能，不需要额外花费精力在里面就能自动触发。</p><h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><pre><code>你说得对， 但这一切有什么卵用呢？</code></pre><p>最显而易见的就是能够学会如何进行细致入微的<strong>观察</strong>和控线技巧，还能够锻炼到对绘画最有帮助的特质——耐心。相信在一张图磨上两三个小时之后，应该就会绘画所需要的时间有一个新的认识。</p><p>以上说的这些从来都不是让人做到画的和照片一致，只是为了锻炼眼力，在日常生活和学习他人画作时，知道如何观察它们，转变为自己创作的素材。而以上三部分，最核心的内容就是学会“概括”。类比起来说，就像学会依靠品尝一道菜就能还原出它的制作流程这样的能力。</p><p>对人而言，眼和脑是有极限的。作为碳基生物，无法洞察这个世界所有的细节，更无法把他们全部记在脑海里。而对于一个作品而言，过量的细节只会让读者（当然是画的读者）找不到重点，甚至让人感觉画面杂乱，太多细节反而是没有细节。（多就是少，少就是多！）当了解如何概括现实世界中无数的细节，将其化作自己作品中的一部分时，就能够有选择地绘画，而非事无巨细的描绘。而这将极大的加快作画的效率，以有限的内容让读者感受到大量的细节。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><pre><code>给自己长篇累牍的废话一个合理的结束</code></pre><p>你可能会发现，在这篇文章里，通篇都是这些毫无意义的理论，看完正文甚至会发现全文都没有写具体怎么抓型，反而主要都是在讲“意义”和“目的”。因为带着目的去画画，相比大脑放空完全无脑的去临摹，能够学的更快更多。我练习的时候，老师就建议首先凭借本能去画，尽自己的眼力去画到一模一样，再去学习各种抓型的步骤手段。现在来看我也深以为然，练习-&gt;学习-&gt;反馈这样的循环，能够很方便的找到自己在练习时的问题，从而在下一次练习时改正。而且这样学到的东西也更加牢靠，不容易遗忘。至于抓型临摹具体如何操作，怎么样科学又有效率的练习，可以参考后续的文章<a href="">只需NaN天，抓型从入门到入门</a>。</p><p>冰冻三尺非一日之寒，在练习的初期自然会遇到数不尽的问题，画出的结果大多也不会如自己所愿。但这都是正常的，任何的大师都是从不会画画开始的。而任何一个人，不论其天赋，都能在经过科学而持久的训练之后，达到一个不错的水平。所以个人理解，任何奇技淫巧都不如耐心这一点来的实在。毕竟，画画就是为了开心嘛。</p><p>本文完全是个人之前学习的总结，表述能力较差，如果有语句不通或不理解的部分，欢迎在评论提出，我将尽快进行修改。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>安德魯·路米斯. 画家之眼[M]. 北京联合出版公司.</li><li>Krenz绘画教学. 助教团队-小明谈抓型</li></ul>]]></content>
    
    
    <categories>
      
      <category>绘画</category>
      
      <category>心得</category>
      
    </categories>
    
    
    <tags>
      
      <tag>绘画</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog简单入门#3</title>
    <link href="/2021/12/28/Verilog%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8-3/"/>
    <url>/2021/12/28/Verilog%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8-3/</url>
    
    <content type="html"><![CDATA[<p>引入编程语言中最常用的循环和分支结构，并且介绍其依赖的语句块。</p><span id="more"></span><h1 id="语句块、分支与循环语句"><a href="#语句块、分支与循环语句" class="headerlink" title="语句块、分支与循环语句"></a>语句块、分支与循环语句</h1><p>Verilog已经将大括号定义为把多个信号连接成一个向量的运算符，因此层次化的语句结构就不得不使用关键字<code>begin...end</code>作为界标。</p><p>在并行的语句中使用循环和分支语句显然是没有意义的，因此在学习分支与循环语句之前，先介绍顺序执行的语句块。</p><h2 id="语句块"><a href="#语句块" class="headerlink" title="语句块"></a>语句块</h2><p>Verilog 语句块提供了将两条或更多条语句组成语法结构上相当于一条一句的机制。主要包括两种类型:顺序块和并行块。</p><div class="note note-warning">            <p>虽然语句块充当了<code>{...}</code>的作用，但是在verilog中，单独的语句块并没有意义，必须要搭配<code>always</code>和<code>inital</code>使用，或者在分支和循环语句中做为多行分支语句或多行循环语句。</p>          </div><h3 id="顺序块与并行块"><a href="#顺序块与并行块" class="headerlink" title="顺序块与并行块"></a>顺序块与并行块</h3><ol><li>顺序块<br>使用<code>begin...end</code>表示，内部的语句都是顺序执行，但<strong>非阻塞式赋值</strong>。除外并且顺序块中每条语句的执行时间都和前一条语句有关。<blockquote><p>非阻塞赋值，即使用<code>&lt;=</code>进行赋值，而非使用<code>=</code>，区别在于非阻塞式赋值不会立即改变被赋值语句的值，而是等<strong>整个语句块结束后再</strong>同时赋值。</p></blockquote></li></ol><ol start="2"><li><p>并行块<br>使用<code>fork...join</code>表示，内部的语句都是并行，即使是阻塞式赋值也一样</p></li><li><p>生成块<br>使用<code>generate...endgenerate</code>表示，用来动态的生成Verilog代码。例如对一个<code>vector</code>的多个位进行重复操作，或想要生成多个重复模块时，生成语句就能极大的缩减代码量。</p></li></ol><p>生成块中的语句同样是顺序执行，因此之后的分支与循环语句都能在其中使用，条件的/重复的进行实例生成。例如</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs verilog">...<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]    co_temp ;<br>    <span class="hljs-comment">//第一个例化模块一般格式有所差异，需要单独例化</span><br>    full_adder1  u_adder0(<br>        <span class="hljs-variable">.Ai</span>     (a[<span class="hljs-number">0</span>]),<br>        <span class="hljs-variable">.Bi</span>     (b[<span class="hljs-number">0</span>]),<br>        <span class="hljs-variable">.Ci</span>     (c==<span class="hljs-number">1&#x27;b1</span> ? <span class="hljs-number">1&#x27;b1</span> : <span class="hljs-number">1&#x27;b0</span>),<br>        <span class="hljs-variable">.So</span>     (so[<span class="hljs-number">0</span>]),<br>        <span class="hljs-variable">.Co</span>     (co_temp[<span class="hljs-number">0</span>]));<br> <br>    <span class="hljs-keyword">genvar</span>        i ;<br>    <span class="hljs-keyword">generate</span><br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">3</span>; i=i+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span>: adder_gen      <span class="hljs-comment">//一定要对循环的语句块进行命名</span><br>        full_adder1  u_adder(<br>            <span class="hljs-variable">.Ai</span>     (a[i]),<br>            <span class="hljs-variable">.Bi</span>     (b[i]),<br>            <span class="hljs-variable">.Ci</span>     (co_temp[i-<span class="hljs-number">1</span>]), <span class="hljs-comment">//上一个全加器的溢位是下一个的进位</span><br>            <span class="hljs-variable">.So</span>     (so[i]),<br>            <span class="hljs-variable">.Co</span>     (co_temp[i]));<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">endgenerate</span><br>...<br></code></pre></td></tr></table></figure><p>在这样的代码展开后，就会循环的生成<code>adder_gen[0].u_adder, adder_gen[1].u_adder, ..., adder_gen[3].u_adder</code>，并自动将其端口按照需求进行连接。同样的<code>initial</code>和<code>always</code>修饰的语句块同样可以在生成块中生成，这里就不作举例，使用方法也类似。</p><h3 id="块的嵌套"><a href="#块的嵌套" class="headerlink" title="块的嵌套"></a>块的嵌套</h3><p>正如C语言中<code>&#123;...&#125;</code>可以相互嵌套，Verilog中的语句块同样可以相互嵌套，比如下面这个例子</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog">...<br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        ai_sequen2         = <span class="hljs-number">4&#x27;d5</span> ;    <span class="hljs-comment">//at 0ns</span><br>        <span class="hljs-keyword">fork</span><br>            #<span class="hljs-number">10</span> ai_paral2          = <span class="hljs-number">4&#x27;d5</span> ;    <span class="hljs-comment">//at 10ns</span><br>            #<span class="hljs-number">15</span> bi_paral2          = <span class="hljs-number">4&#x27;d8</span> ;    <span class="hljs-comment">//at 15ns</span><br>        <span class="hljs-keyword">join</span><br>        #<span class="hljs-number">20</span> bi_sequen2      = <span class="hljs-number">4&#x27;d8</span> ;    <span class="hljs-comment">//at 35ns</span><br>    <span class="hljs-keyword">end</span><br>...<br></code></pre></td></tr></table></figure><p>这个例子中<code>initial</code>关键字修饰的语句块将仅会在模拟一开始执行一次，这些用于修饰语句块的关键字将会在后面的文章里介绍。</p><h3 id="命名块"><a href="#命名块" class="headerlink" title="命名块"></a>命名块</h3><p>我们可以给语句块命名，并且只有命名的语句块中才能声明局部变量，比如下面这个例子:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> test<br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span>: init   <span class="hljs-comment">//命名模块名字为init，分号不能少</span><br>        <span class="hljs-keyword">integer</span>    i ;       <span class="hljs-comment">//此变量可以通过 test.init.i 被其他模块使用</span><br>        i = <span class="hljs-number">0</span> ;<br>        <span class="hljs-keyword">forever</span> <span class="hljs-keyword">begin</span><br>            #<span class="hljs-number">10</span> i = i + <span class="hljs-number">10</span> ;      <br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>...<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>并且，在<code>generate...endgenerate</code>生成块中，使用<code>for</code>循环的语句块必须要命名，否则就无法通过层次化引用来访问生成的实例，比如:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog">...<br><span class="hljs-keyword">genvar</span> j;       <span class="hljs-comment">//只能用于生成块的变量</span><br><span class="hljs-keyword">generate</span><br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j&lt;<span class="hljs-number">10</span>; j=j+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span>: xor_loop  <br>    <span class="hljs-comment">//命名为xor_loop，后续才能通过 模块名.xor_loop[i].gl进行访问</span><br>        <span class="hljs-keyword">xor</span> gl(out[j], in1[j], in2[<span class="hljs-number">2</span>]);     <span class="hljs-comment">//假设的一个外部异或模块xor.</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endgenerate</span><br>...<br></code></pre></td></tr></table></figure><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="if-else分支"><a href="#if-else分支" class="headerlink" title="if-else分支"></a>if-else分支</h3><div class="note note-info">            <p><span style = "color:#428BCA; font-size:1.2em;"><strong>HDLbit相关题目</strong></span><br><a href="https://hdlbits.01xz.net/wiki/Always_if">if statement</a><br><a href="https://hdlbits.01xz.net/wiki/Always_if2">if statement latchs</a></p>          </div><p>Verilog中的<code>if-else</code>语句使用和C语言中完全一致，但因为没有大括号区分的原因，可能会造成阅读代码时的二义性，比如:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">if</span>(en)<br>    <span class="hljs-keyword">if</span>(sel == <span class="hljs-number">2&#x27;b1</span>)<br>        sout = p1s ;<br>    <span class="hljs-keyword">else</span><br>        sout = p0 ;<br></code></pre></td></tr></table></figure><p>这里如果不做缩进处理，很难判断else是与第一个if匹配还是与第二个if匹配。虽然在编译器处理时<code>else</code>语句总是和最近的<code>if</code>匹配，但显然这样的写法是不规范且不安全的。如果想要让例子中的<code>else</code>与第一个<code>if</code>匹配，就需要加入<code>begin...end</code>关键字。</p><p>例如将上例子中的代码修改成这样:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">if</span>(en) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(sel == <span class="hljs-number">2&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        sout = p1s ;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        sout = p0 ;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>就不会有歧义。</p><h4 id="隐含的锁存器"><a href="#隐含的锁存器" class="headerlink" title="隐含的锁存器"></a>隐含的锁存器</h4><p>在某些时候，由于编码上的失误，可能会在组合逻辑电路的<code>if-else</code>语句中生成不期望出现的<strong>锁存器</strong>，比如下面这个情况:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (cpu_overheated)<br>       shut_off_computer = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>虽然目的是在<code>cpu_overheated</code>为高电平时，将<code>shut_off_computer</code>设置为高电平，但是当<code>cpu_overheated</code>为低电平时，并不会重置<code>shut_off_computer</code>。这里就出现了一个隐含的锁存器。</p><h3 id="case-多路分支"><a href="#case-多路分支" class="headerlink" title="case 多路分支"></a>case 多路分支</h3><div class="note note-info">            <p><span style = "color:#428BCA; font-size:1.2em;"><strong>HDLbit相关题目</strong></span><br><a href="https://hdlbits.01xz.net/wiki/Always_case">case statement</a><br><a href="https://hdlbits.01xz.net/wiki/Always_case2">priority encoder</a><br><a href="https://hdlbits.01xz.net/wiki/Always_casez">priority encoder with casez</a><br><a href="https://hdlbits.01xz.net/wiki/Always_nolatches">avoiding latchs</a></p>          </div><h4 id="普通case"><a href="#普通case" class="headerlink" title="普通case"></a>普通case</h4><p>Verilog中同样有类似C语言的<code>switch...case</code>语句，但是相对不同的是，Verilog中不使用<code>switch</code>关键字，而是直接使用<code>case(...)</code>作为开头，格式如下:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">case</span>(case_expr)<br>    condition1     :             true_statement1 ;<br>    condition2     :             true_statement2 ;<br>    ……<br>    <span class="hljs-keyword">default</span>        :             default_statement ;<br><span class="hljs-keyword">endcase</span><br></code></pre></td></tr></table></figure><p>你可能注意到，在Verilog中的多路分支语句，并没有明确的使用<code>break;</code>，这是因为每个条件分支只会执行自身，无需<code>break;</code>跳出。</p><h4 id="casez-casex"><a href="#casez-casex" class="headerlink" title="casez/casex"></a>casez/casex</h4><p>分支条件中的值不一定必须是常量，还可以是不定值。这种分支结构<em>不可综合，主要用于仿真</em>，但是它可以给编码带来极大的便利。例如当我想实现一个“输出输入信号从低到高中最先出现的高电平所属位数”的模块，在不适用<code>casez</code>或<code>casex</code>时，就不得不这么写:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] pos  );<br>    <span class="hljs-keyword">always</span> @(*)<br>        <span class="hljs-keyword">case</span>(in)<br>            <span class="hljs-number">4&#x27;d0</span>: pos = <span class="hljs-number">2&#x27;d0</span>;<br>            <span class="hljs-number">4&#x27;d1</span>: pos = <span class="hljs-number">2&#x27;d0</span>;         <br>            <span class="hljs-number">4&#x27;d3</span>: pos = <span class="hljs-number">2&#x27;d0</span>;<br>            <span class="hljs-number">4&#x27;d5</span>: pos = <span class="hljs-number">2&#x27;d0</span>;<br>            <span class="hljs-number">4&#x27;d7</span>: pos = <span class="hljs-number">2&#x27;d0</span>;<br>            <span class="hljs-number">4&#x27;d9</span>: pos = <span class="hljs-number">2&#x27;d0</span>;<br>            <span class="hljs-number">4&#x27;d11</span>: pos = <span class="hljs-number">2&#x27;d0</span>;<br>            <span class="hljs-number">4&#x27;d13</span>: pos = <span class="hljs-number">2&#x27;d0</span>;<br>            <span class="hljs-number">4&#x27;d15</span>: pos = <span class="hljs-number">2&#x27;d0</span>;<br>            <br>            <span class="hljs-number">4&#x27;d2</span>: pos = <span class="hljs-number">2&#x27;d1</span>;<br>            <span class="hljs-number">4&#x27;d6</span>: pos = <span class="hljs-number">2&#x27;d1</span>;<br>            <span class="hljs-number">4&#x27;d10</span>:pos = <span class="hljs-number">2&#x27;d1</span>;<br>            <span class="hljs-number">4&#x27;d14</span>:pos = <span class="hljs-number">2&#x27;d1</span>;<br>            <br>            <span class="hljs-number">4&#x27;d4</span>: pos = <span class="hljs-number">2&#x27;d2</span>;<br>            <span class="hljs-number">4&#x27;d12</span>:pos = <span class="hljs-number">2&#x27;d2</span>;<br>            <br>            <span class="hljs-number">4&#x27;d8</span>: pos = <span class="hljs-number">2&#x27;d3</span>;<br>        <span class="hljs-keyword">endcase</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>这还只是四位长的输入，就需要2的4次方一共16个分支，如果输入扩大代码量将会指数增长。那么如果我们用<code>casez/casex</code>关键字进行改写一个八位输入同样功能的模块，将会变成这样:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// synthesis verilog_input_version verilog_2001</span><br><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] pos  );<br>    <span class="hljs-keyword">always</span> @(*)<br>        <span class="hljs-keyword">casez</span>(in)<br>            <span class="hljs-number">8&#x27;bzzzzzzz1</span>: pos = <span class="hljs-number">3&#x27;d0</span>;<br>            <span class="hljs-number">8&#x27;bzzzzzz1z</span>: pos = <span class="hljs-number">3&#x27;d1</span>;<br>            <span class="hljs-number">8&#x27;bzzzzz1zz</span>: pos = <span class="hljs-number">3&#x27;d2</span>;<br>            <span class="hljs-number">8&#x27;bzzzz1zzz</span>: pos = <span class="hljs-number">3&#x27;d3</span>;<br>            <span class="hljs-number">8&#x27;bzzz1zzzz</span>: pos = <span class="hljs-number">3&#x27;d4</span>;<br>            <span class="hljs-number">8&#x27;bzz1zzzzz</span>: pos = <span class="hljs-number">3&#x27;d5</span>;<br>            <span class="hljs-number">8&#x27;bz1zzzzzz</span>: pos = <span class="hljs-number">3&#x27;d6</span>;<br>            <span class="hljs-number">8&#x27;b1zzzzzzz</span>: pos = <span class="hljs-number">3&#x27;d7</span>;<br>            <span class="hljs-keyword">default</span>: pos = <span class="hljs-number">3&#x27;d0</span>;<br>        <span class="hljs-keyword">endcase</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>在<code>casez</code>分支中，所有的不定值都用<code>z</code>代替，表示一个可以匹配任何信号的通配符。很显然这样一来，就会出现一个问题，<code>10000001</code>又可以与第一条匹配，又可以与最后一条匹配。为了解决这个问题，编译器会从上往下逐条进行比较，并且仅运行第一次匹配成功的分支。这就意味着在<code>casez/casex</code>分支中，各个分支其实是带有优先级的。</p><blockquote><p>其实普通<code>case</code>也有，不过规范情况下各个分支不应该有重叠</p></blockquote><h3 id="条件运算符-更简单的分支语句"><a href="#条件运算符-更简单的分支语句" class="headerlink" title="条件运算符-更简单的分支语句"></a>条件运算符-更简单的分支语句</h3><p>和C语言一样，同样我们可以用<code>condition ? if_ture : if_false</code>表示一个轻量级的分支结构。从而避免为了一个<code>if-else</code>写一个长长的<code>always</code>块。例如:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">(<span class="hljs-number">0</span> ? <span class="hljs-number">3</span> : <span class="hljs-number">5</span>)     <span class="hljs-comment">// This is 5 because the condition is false.</span><br>(sel ? b : a)   <span class="hljs-comment">// A 2-to-1 multiplexer between a and b selected by sel.</span><br></code></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>没什么可介绍的，和C语言大多类似，把<code>begin...end</code>看作<code>&#123;...&#125;</code>就非常好理解了。</p><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p>和C语言使用完全一致，唯一需要注意的是在Verilog中不支持自增运算，也就是说不得不用<code>i = i + 1</code>d代替<code>i++</code>，使用样例:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">integer</span>      i ;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]    counter2 ;<br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    counter2 = <span class="hljs-number">&#x27;b0</span> ;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;=<span class="hljs-number">10</span>; i=i+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>        #<span class="hljs-number">10</span> ;<br>        counter2 = counter2 + <span class="hljs-number">1&#x27;b1</span> ;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><p>这也和C语言完全一致，我连样例都不想放了…</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]    counter ;<br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    counter = <span class="hljs-number">&#x27;b0</span> ;<br>    <span class="hljs-keyword">while</span> (counter&lt;=<span class="hljs-number">10</span>) <span class="hljs-keyword">begin</span><br>        #<span class="hljs-number">10</span> ;<br>        counter = counter + <span class="hljs-number">1&#x27;b1</span> ;<br>    <span class="hljs-keyword">end</span><br> <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="repeat-循环"><a href="#repeat-循环" class="headerlink" title="repeat 循环"></a>repeat 循环</h3><p>repeat 的功能是执行固定次数的循环，它不能像 while 循环那样用一个逻辑表达式来确定循环是否继续执行。repeat 循环的次数必须是一个常量、变量或信号。</p><div class="note note-info">            <p>当循环次数是一个变量或信号时，即使在repeat运行时循环次数发生了变化，repeat运行次数也不会发生改变。</p>          </div><p>使用样例:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]    counter3 ;<br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    counter3 = <span class="hljs-number">&#x27;b0</span> ;<br>    <span class="hljs-keyword">repeat</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">begin</span>  <span class="hljs-comment">//重复11次</span><br>        #<span class="hljs-number">10</span> ;<br>        counter3 = counter3 + <span class="hljs-number">1&#x27;b1</span> ;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="forever-循环"><a href="#forever-循环" class="headerlink" title="forever 循环"></a>forever 循环</h3><p>无限循环，相当于<code>while(true)</code>，不过在Verilog中无限循环还是有他存在的意义，因为Verilog是一个并行性的语言，不用担心程序卡死。通常，forever 循环是和时序控制结构配合使用的，比如说我们可以用<code>forever</code>做一个简单的时钟激励:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">reg</span> clk ;<br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    clk = <span class="hljs-number">0</span> ;<br>    <span class="hljs-keyword">forever</span> <span class="hljs-keyword">begin</span><br>        clk = ~clk ;<br>        #<span class="hljs-number">5</span> ;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>在模拟一开始，就会开始运行这个无限循环，使<code>clk</code>成为一个周期为10的时钟信号。</p><h3 id="规约运算-循环的简单替代品"><a href="#规约运算-循环的简单替代品" class="headerlink" title="规约运算-循环的简单替代品"></a>规约运算-循环的简单替代品</h3><p>有些时候我们打算对一个向量里的所有位进行连续逻辑运算，例如对一个向量所有位进行<code>AND</code>运算，如果使用循环，就不得这么写:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">wire</span>[<span class="hljs-number">10</span>:<span class="hljs-number">0</span>] vec;<br><span class="hljs-keyword">wire</span> rel;<br><span class="hljs-keyword">reg</span> i;<br>...<br><span class="hljs-keyword">always</span> *()<span class="hljs-keyword">begin</span>:<br>    rel = vec[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i&lt;<span class="hljs-number">10</span>; i = i+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span>:<br>        rel = rel &amp; vec[i];<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>不得不为了这么一个简单的操作写一个“冗长”的循环，在Verilog中提供了一个更简单的运算，称为规约运算符。同样是上面的例子，就可以改写为:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wire</span> rel;<br><span class="hljs-attribute">wire</span>[<span class="hljs-number">10</span>:<span class="hljs-number">0</span>] vec;<br><span class="hljs-attribute">assign</span> rel = &amp; vec[<span class="hljs-number">10</span>:<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><p>这就相当于对vec中所有的位连续进行<code>AND</code>运算，相对更加方便，同理其他的位运算也可以这么使用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>硬件设计验证 基于模拟与形式的方法 simulation and formal method-based approaches[M].,:359.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>菜鸟教程[<a href="https://www.runoob.com/w3cnote/verilog-case.html]">https://www.runoob.com/w3cnote/verilog-case.html]</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>Verilog数字系统设计教程[M].,:478.<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Verilog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog简单入门#2</title>
    <link href="/2021/12/15/Verilog%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8-2/"/>
    <url>/2021/12/15/Verilog%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8-2/</url>
    
    <content type="html"><![CDATA[<p><a href="https://kiridore.github.io/2021/12/14/Verilog%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8-1/">上一篇</a>中我们介绍了线网、模块和简单组合逻辑。下面将会引入大于1bit长的信号，也就是向量(vector)。然后我们将详细学习模块的使用，并在模块中实例外部模块来复用代码。</p><span id="more"></span><h1 id="向量-vector-与模块-module"><a href="#向量-vector-与模块-module" class="headerlink" title="向量(vector)与模块(module)"></a>向量(vector)与模块(module)</h1><h2 id="向量-vector"><a href="#向量-vector" class="headerlink" title="向量(vector)"></a>向量(vector)</h2><p>在Verilog中，位宽大于1的数据，都将使用向量进行保存</p><h3 id="数值表示"><a href="#数值表示" class="headerlink" title="数值表示"></a>数值表示</h3><p>verilog中不同于一般编程语言，它包含了四种不同的值来表示硬件电路中的电平逻辑：</p><ul><li>1 高电平 或 逻辑“真”</li><li>0 低电平 或 逻辑“假”</li><li>x 不定值 未知，表示电路中可能为<code>0</code>或<code>1</code></li><li>z 高阻态, 常见于信号没有驱动的逻辑结果。逻辑值与上下拉的状态有关，上拉电路为1，下拉电路为0</li></ul><p>数字声明时，合法的进制表示有四种，包括：十进制(‘d 或 ‘D)，十六进制(‘h 或 ‘H)，二进制（’b 或 ‘B），八进制（’o 或 ‘O）。数值可指明位宽，也可不指明位宽。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-number">4&#x27;b0101</span>     <span class="hljs-comment">//表示4bit位宽的二进制数“0101”</span><br><span class="hljs-number">&#x27;d100</span>       <span class="hljs-comment">//表示十进制数“100”，不指定位宽时根据编译器自动分配，常见为32位</span><br></code></pre></td></tr></table></figure><p>声明负数时，需要将负号写在数值的<strong>最左侧</strong>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust">-<span class="hljs-number">32</span><span class="hljs-symbol">&#x27;h12A8F</span>     <span class="hljs-comment">//合法</span><br><span class="hljs-number">3</span><span class="hljs-symbol">&#x27;b</span>-<span class="hljs-number">100</span>     <span class="hljs-comment">//非法</span><br></code></pre></td></tr></table></figure><h3 id="向量的使用"><a href="#向量的使用" class="headerlink" title="向量的使用"></a>向量的使用</h3><h4 id="声明与取值"><a href="#声明与取值" class="headerlink" title="声明与取值"></a>声明与取值</h4><div class="note note-info">            <p><span style = "color:#428BCA; font-size:1.2em;"><strong>HDLbit相关题目</strong></span><br><a href="https://hdlbits.01xz.net/wiki/Vector0">Vectors</a><br><a href="https://hdlbits.01xz.net/wiki/Vector1">Vectors in more detail</a><br><a href="https://hdlbits.01xz.net/wiki/Vector2">Vectors part select</a></p>          </div><p>和C语法有所不同的是，verilog的向量声明需要把向量宽度写在类型后，向量名之前，即：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] w;         <span class="hljs-comment">// 8-bit wire</span><br><span class="hljs-keyword">reg</span>  [<span class="hljs-number">4</span>:<span class="hljs-number">1</span>] x;         <span class="hljs-comment">// 4-bit reg</span><br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">0</span>:<span class="hljs-number">0</span>] y;   <span class="hljs-comment">// 1-bit reg that is also an output port (this is still a vector)</span><br><span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:-<span class="hljs-number">2</span>] z;  <span class="hljs-comment">// 6-bit wire input (negative ranges are allowed)</span><br><span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] a;       <span class="hljs-comment">// 4-bit output wire. Type is &#x27;wire&#x27; unless specified otherwise.</span><br><span class="hljs-keyword">wire</span> [<span class="hljs-number">0</span>:<span class="hljs-number">7</span>] b;         <span class="hljs-comment">// 8-bit wire where b[0] is the most-significant bit.</span><br></code></pre></td></tr></table></figure><p>一般都将高位写在左侧，低位写在右侧，虽然有一些违背直觉，但后面我们就会看到这样做的方便之处。</p><p>要获取向量中单个bit的值，就与C语言中数组的取值方式一样，但同时也可以取向量的一段：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> out = w[<span class="hljs-number">3</span>]; <br><span class="hljs-keyword">assign</span> out2 = w[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]; <span class="hljs-comment">//取向量的低三位</span><br></code></pre></td></tr></table></figure><p>需要注意的是，对向量的范围取值，需要和向量声明时格式相同。也就是说声明时左侧为高位，在取值时也只能遵循左侧为高位的写法：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> out = w[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]; <span class="hljs-comment">//非法，和声明不符</span><br><span class="hljs-keyword">assign</span> out2 = b[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]; <span class="hljs-comment">//同样非法</span><br></code></pre></td></tr></table></figure><h4 id="向量连接"><a href="#向量连接" class="headerlink" title="向量连接"></a>向量连接</h4><div class="note note-info">            <p><span style = "color:#428BCA; font-size:1.2em;"><strong>HDLbit相关题目</strong></span><br><a href="https://hdlbits.01xz.net/wiki/Vector3">Vector conncatenation operator</a><br><a href="https://hdlbits.01xz.net/wiki/Vector4">Replication Vector</a><br><a href="https://hdlbits.01xz.net/wiki/Vector5">More replication</a></p>          </div><p>上面讲了如何将向量分成多个区域，下面介绍如何使用<code>&#123;...&#125;</code>将多个向量（或线网变量）合并为一个大的向量</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] w; <br><span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] b;  <br><span class="hljs-keyword">assign</span> out = &#123;w, b&#125;;    <span class="hljs-comment">//连接形成一个高七位为w，低四位为b的向量</span><br></code></pre></td></tr></table></figure><p>上面代码中使用<code>&#123;...&#125;</code>将两个向量链接起来，其中左侧的为高位，右侧为低位，正好也就配合之前声明时，左侧为高位右侧为低位的设计。</p><p>但是某些时候，我们需要将一个向量复制多次，合并为一个更宽的向量，按照上面的做法就需要<code>assign a = &#123;b,b,b,b,b&#125;</code>。<strong>复制</strong>操作就允许重复多次同一个向量，并把它们连接在一起</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">&#123;num&#123;vector&#125;&#125;<br></code></pre></td></tr></table></figure><p>表示将向量<code>vector</code>重复<code>num</code>次，并把他们连接在一起。下面是一些复制操作的例子：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog">&#123;<span class="hljs-number">5</span>&#123;<span class="hljs-number">1&#x27;b1</span>&#125;&#125;           <span class="hljs-comment">// 5&#x27;b11111 (or 5&#x27;d31 or 5&#x27;h1f)</span><br>&#123;<span class="hljs-number">2</span>&#123;a,b,c&#125;&#125;          <span class="hljs-comment">// The same as &#123;a,b,c,a,b,c&#125;</span><br>&#123;<span class="hljs-number">3&#x27;d5</span>, &#123;<span class="hljs-number">2</span>&#123;<span class="hljs-number">3&#x27;d6</span>&#125;&#125;&#125;   <span class="hljs-comment">// 9&#x27;b101_110_110. It&#x27;s a concatenation of 101 with</span><br>                    <span class="hljs-comment">// the second vector, which is two copies of 3&#x27;b110.</span><br></code></pre></td></tr></table></figure><h4 id="逻辑运算与位运算"><a href="#逻辑运算与位运算" class="headerlink" title="逻辑运算与位运算"></a>逻辑运算与位运算</h4><div class="note note-info">            <p><span style = "color:#428BCA; font-size:1.2em;"><strong>HDLbit相关题目</strong></span><br><a href="https://hdlbits.01xz.net/wiki/Vectorgates">Bitwire operator</a><br><a href="https://hdlbits.01xz.net/wiki/Gates4">Four-input gate</a></p>          </div><p>之前我们说对于1bit位宽的信号，对其进行逻辑运算和位运算是没有区别的，但在操作数为向量情况下就需要分开讨论。</p><p>逻辑运算时，任何不是0的数，都被看作<code>true</code>，任何等于0的数，都被看做<code>false</code><br>按位运算略显复杂，下面分情况讨论：</p><ul><li>按位运算对两个操作数每bit进行按位操作</li><li>如果 2 个操作数位宽不相等，则用 0 向左扩展补充较短的操作数。</li><li>取反操作符只有一个操作数，它对操作数的每 1bit 数据进行取反操作。</li></ul><h4 id="打包-packed-与解包-unpacked"><a href="#打包-packed-与解包-unpacked" class="headerlink" title="打包(packed)与解包(unpacked)"></a>打包(packed)与解包(unpacked)</h4><p>虽然在前面的向量声明中提到，需要把向量位宽写在类型和向量名之间，但实际上也有一种与C语言数组类似的语法，将向量宽度写在向量名之后，这样就形成了一个解包(unpacked)向量。</p><p>而利用这个特性，我们就可以在Verilog中实现“二维数组”，例如:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">reg</span> <span class="hljs-selector-attr">[7:0]</span> <span class="hljs-selector-tag">mem</span> <span class="hljs-selector-attr">[255:0]</span>;   <span class="hljs-comment">// 256个解包元素, 每一个都是八位宽的reg向量</span><br><span class="hljs-selector-tag">reg</span> <span class="hljs-selector-tag">mem2</span> <span class="hljs-selector-attr">[28:0]</span>;         <span class="hljs-comment">// 29个解包元素, 每个是一位的reg变量</span><br></code></pre></td></tr></table></figure><p>打包的向量只能使用1bit的类型作为元素，因此其实际上是一个整体，可以进行加减操作或者求值。而解包向量中的元素没有限制，但是无法作为一个整体被计算，只能看作是多个元素的“集合”。</p><h2 id="模块-module"><a href="#模块-module" class="headerlink" title="模块(module)"></a>模块(module)</h2><div class="note note-info">            <p><span style = "color:#428BCA; font-size:1.2em;"><strong>HDLbit相关题目</strong></span><br><a href="https://hdlbits.01xz.net/wiki/Vectorgates">Module</a><br><a href="https://hdlbits.01xz.net/wiki/Gates4">Four-input gate</a></p>          </div><p>类似C语言的函数，模块(module)的目的就在于将不同的电路模块化，便于复用。</p><blockquote><p>注意：一个模块的代码不会写在另一个模块的主体里面（不同模块的代码不会嵌套），这与C语言中的函数定义有一定的不同。</p></blockquote><p>模块的格式相对固定，具体如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(port1, port2, port3)<br>    <span class="hljs-comment">//assign something.</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>在对一个模块进行实例化时，直接使用<code>module_name instance_name(port1, port2...)；</code>即可，这里涉及到对实例化的模块内部传递信号的问题，在verilog中传递信号分为两种方法，分别是“通过位置的”和“通过端口名的”</p><h3 id="将信号与模块链接的方式"><a href="#将信号与模块链接的方式" class="headerlink" title="将信号与模块链接的方式"></a>将信号与模块链接的方式</h3><p>首先假设我们有一个形如：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">module</span> <span class="hljs-keyword">mod</span><span class="hljs-constructor">_a(<span class="hljs-params">input</span> <span class="hljs-params">in1</span>, <span class="hljs-params">input</span> <span class="hljs-params">in2</span>, <span class="hljs-params">output</span> <span class="hljs-params">out</span>)</span>;<br>    <span class="hljs-comment">//DD SOMETHING....</span><br>endmodule<br></code></pre></td></tr></table></figure><p>的模块，接下来说明两种方式是如何在实例化模块是将其端口和信号连接的。</p><h4 id="通过位置连接"><a href="#通过位置连接" class="headerlink" title="通过位置连接"></a>通过位置连接</h4><p>这种语法与C语言的函数调用更相似，实例化一个模块后，直接将想要传入的信号写入到对应的位置即可。下面的代码的实例化了一个<code>mod_a</code>模块，并将其实例命名为<code>instance1</code>，然后将<code>wa</code>传入他的<strong>第一个</strong>端口<code>in1</code>，<code>wb</code>传入<strong>第二个</strong>端口<code>in2</code>，<code>wc</code>传入<strong>第三个</strong>端口<code>out</code>。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">mod_a i<span class="hljs-symbol">nstance1</span><span class="hljs-comment">(wa,wb,wc)</span>;<br></code></pre></td></tr></table></figure><p>这种做法有一个缺点，一旦模块的列表发生了变化，接下来所有的实例化语句都需要进行修改来匹配修改后的模块。</p><h4 id="通过端口名连接"><a href="#通过端口名连接" class="headerlink" title="通过端口名连接"></a>通过端口名连接</h4><p>这种语法允许指定外部信号要绑定的模块端口，相比于上一种写法更加冗长，例如要以端口名连接信号来完成之前代码的功能：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">mod_a instance1(<span class="hljs-variable">.in1</span>(wa),<span class="hljs-variable">.in2</span>(wb),<span class="hljs-variable">.out</span>(wc));<br></code></pre></td></tr></table></figure><p>这样就通过<strong>端口名称</strong>将信号与端口连接起来。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.runoob.com/w3cnote/verilog-tutorial.html">菜鸟教程-Verilog教程</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://hdlbits.01xz.net/wiki/Problem_sets">HDLbit</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/56646479">HDLBits: 在线学习 Verilog</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="http://www.asic-world.com/systemverilog/data_types10.html">Data type part-x</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Verilog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog简单入门#1</title>
    <link href="/2021/12/14/Verilog%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8-1/"/>
    <url>/2021/12/14/Verilog%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8-1/</url>
    
    <content type="html"><![CDATA[<p>介绍HDLbit在线仿真平台与Verilog的语法使用和简单的逻辑，并掺杂了部分个人理解。</p><span id="more"></span><h1 id="使用在线平台HDLbit入门Verilog"><a href="#使用在线平台HDLbit入门Verilog" class="headerlink" title="使用在线平台HDLbit入门Verilog"></a>使用在线平台HDLbit入门Verilog</h1><div class="note note-warning">            <p>本文中所有配图均转自<a href="https://hdlbits.01xz.net/wiki/Main_Page">HDLbit</a></p>          </div><h2 id="什么是Verilog"><a href="#什么是Verilog" class="headerlink" title="什么是Verilog"></a>什么是Verilog</h2><p>Verilog是一种用于描述、设计电子系统（特别是数字电路）的硬件描述语言，主要用于在集成电路设计，特别是超大规模集成电路的计算机辅助设计。Verilog是电气电子工程师学会（IEEE）的1364号标准。Verilog起源于C语言，与起源于ADA语言的VHDL相比更容易掌握。</p><p>这种特殊的<strong>编程语言</strong>能够:</p><ul><li>描述电路的连接</li><li>描述电路的功能</li><li>在不同抽象级上描述电路</li><li>描述电路的时序</li><li><span style="color: #E04C5A;">表达具有<strong>并行性</strong></span></li></ul><p>Verilog HDL与普通编程语言最大的区别就是并行性，在Verilog的module（类似C语言的函数结构）描述了一个逻辑模块，其中的逻辑描述大部分都是并行的，没有先后顺序之分（当然也有例外的顺序程序块）。</p><h2 id="使用在线平台"><a href="#使用在线平台" class="headerlink" title="使用在线平台"></a>使用在线平台</h2><p>已经学习了一些Verilog（或者完全不会)，但又不想在电脑上装一个模拟环境，就选择了在线模拟练习平台<a href="https://hdlbits.01xz.net/wiki/Main_Page">HDLbit</a>。HDLBits 有一系列的 Verilog 基础知识，从最简单的 wire 的概念开始，包括了 Verilog 的基础语法，由逻辑门与触发器组成的电路，组合时序电路的概念，模块层级概念，testbench 的编写等等。</p><p>HDLbit平台类似于leetcode或OJ平台，能够在线分析模拟Verilog并且对其进行测试，给出信号曲线。同时提供大量从易到难的练习题以供学习和练习Verilog语法和电路设计，即使没有任何Verilog语法知识也能通过网站提供的练习题快速入门。</p><h2 id="开始学习"><a href="#开始学习" class="headerlink" title="开始学习"></a>开始学习</h2><h3 id="从最简单的module开始"><a href="#从最简单的module开始" class="headerlink" title="从最简单的module开始"></a>从最简单的module开始</h3><p>以下是一个仅有输出，且输出恒定为1的模块，下面来简单介绍一下verilog的语法构成。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> one(<span class="hljs-keyword">output</span> out);<br>    <span class="hljs-keyword">assign</span> one = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><div class="note note-info">            <p><span style = "color:#428BCA; font-size:1.2em;"><strong>HDLbit相关题目</strong></span><br><a href="https://hdlbits.01xz.net/wiki/step_one">Step one</a><br><a href="https://hdlbits.01xz.net/wiki/Zero">Zeor</a></p>          </div><p>与C语言类似的，以分号<code>;</code>作为语句结尾，可以将多行语句写在同一行（当然大家都不会这么干）。同时标识符区分大小写，注释使用与C语言相同，<code>//...</code>为单行<code>/*...*/</code>为多行注释。</p><h4 id="线网-wire"><a href="#线网-wire" class="headerlink" title="线网(wire)"></a>线网(wire)</h4><div class="note note-info">            <p><span style = "color:#428BCA; font-size:1.2em;"><strong>HDLbit相关题目</strong></span><br><a href="https://hdlbits.01xz.net/wiki/Wire">Simple wire</a><br><a href="https://hdlbits.01xz.net/wiki/Wire4">Four wires</a></p>          </div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(intput in, <span class="hljs-keyword">output</span> out);<br>    <span class="hljs-keyword">assign</span> out = in;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>描述一个将输入直接接到输出的模块电路，它的行为其实就类似于一根电线。但和物理中的电线不同的是，Verilog中“线”是有方向的，也就是说在线网中流动是单向的。要将原信号导向目的，在Verilog中使用称为连续赋值(continuous assignment)语句进行，即上述代码第2行<code>assign out = in;</code>，表示将in中的信号导向out。</p><p>在Module开头的<code>input in</code>和<code>output out</code>都是一种线网(wire)，只不过预先设定了他们的信号流向。线网(wire)在Verilog中更类似于编程语言中的“变量”，在后面的练习中就能看到在模块(module)内部声明一个线网(wire)并用来传递信号的操作。<br><img src="https://hdlbits.01xz.net/mw/images/7/77/Wire.png"><br>之所以称之为“连续”(continuous)是因为只要当等号右侧的信号发生变化，都会执行一次赋值操作，并不像其他编程语言一样是一次性的语句。这样一来连续赋值语句的顺序也就不重要了，这也就能说明Verilog所具有的并行性，也解释了硬件描述语言（HDL）中的“描述”。</p><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><div class="note note-info">            <p><span style = "color:#428BCA; font-size:1.2em;"><strong>HDLbit相关题目</strong></span><br><a href="https://hdlbits.01xz.net/wiki/Notgate">Inverter</a><br><a href="https://hdlbits.01xz.net/wiki/Andgate">AND gate</a><br><a href="https://hdlbits.01xz.net/wiki/Andgate">NOR gate</a><br><a href="https://hdlbits.01xz.net/wiki/Andgate">XNOR gate</a></p>          </div><p>任何电路都离不开and|or|not的逻辑操作，在Verilog可以使用与C语言类似的逻辑描述</p><blockquote><p>在对于1bit信号进行处理时，逻辑运算和位运算结果没有区别，我们后面再进行区分</p></blockquote><p>比如下面这个模块描述的是一个非门:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <span class="hljs-keyword">input</span> in, <span class="hljs-keyword">output</span> out );<br><span class="hljs-keyword">assign</span> out = !in;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p><img src="https://hdlbits.01xz.net/mw/images/9/9e/Notgate.png"><br>Verilog使用<code>!</code>表示逻辑非，而使用<code>~</code>表示位运算中的非，这与C语言中的操作是一致的。下面的表格列举了位运算和逻辑运算的四种运算符（逻辑运算中没有实现异或(XOR)）:</p><table><thead><tr><th></th><th>Logic</th><th>Bit</th></tr></thead><tbody><tr><td>AND</td><td>&amp;&amp;</td><td>&amp;</td></tr><tr><td>OR</td><td>||</td><td>|</td></tr><tr><td>NO</td><td>!</td><td>~</td></tr><tr><td>XOR</td><td>—</td><td>^</td></tr></tbody></table><p>结合之前的连续赋值语句(continuous assignment)语句，就能很简单的实现各项逻辑操作，比如要将两个信号进过异或非门后再导向其他线网，使用<code>assign direct_wire = source_A ~^ source_B;</code>就能很简单的实现。</p><blockquote><p>更多的运算符使用方法，详见参考资料菜鸟教程<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="菜鸟教程-Verilog教程">[1]</span></a></sup></p></blockquote><h4 id="模块内线网-wire"><a href="#模块内线网-wire" class="headerlink" title="模块内线网(wire)"></a>模块内线网(wire)</h4><div class="note note-info">            <p><span style = "color:#428BCA; font-size:1.2em;"><strong>HDLbit相关题目</strong></span><br><a href="https://hdlbits.01xz.net/wiki/Wire_decl">Declaring Wires</a><br><a href="https://hdlbits.01xz.net/wiki/7458">7488 Chip</a></p>          </div><p>当一个模块内有不止一个电子元件（比如两个串联的非门，虽然没什么意义）的时候，就需要一个“中间变量”来传递信号，这时就可以使用<code>wire wire_name;</code>来在模块里声明一个线网，并使用<code>assign wire_name = sourece</code>来进行信号的传递。</p><p>例如在题目<a href="https://hdlbits.01xz.net/wiki/Wire_decl">Declaring Wires</a>中，我们需要将四个信号两两进行AND运算并将结果进行OR运算时，就需要使用线网(wire)进行传递。下面的代码仅仅实现对四个信号先进行AND后进行OR运算，并非上述题目的题解：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<span class="hljs-keyword">input</span> a, <span class="hljs-keyword">input</span> b, <span class="hljs-keyword">input</span> c, <span class="hljs-keyword">input</span> d,<br>    <span class="hljs-keyword">output</span> out,<span class="hljs-keyword">output</span> out_n   ); <br><br>    <span class="hljs-keyword">wire</span> and_one, and_two, or_one;<br>    <br>    <span class="hljs-keyword">assign</span> and_one = a &amp; b;<br>    <span class="hljs-keyword">assign</span> and_two = c &amp; d;<br>    <span class="hljs-keyword">assign</span> or_one = and_one | and_two;<br>    <span class="hljs-comment">//...</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.runoob.com/w3cnote/verilog-tutorial.html">菜鸟教程-Verilog教程</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://hdlbits.01xz.net/wiki/Problem_sets">HDLbit</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/56646479">HDLBits: 在线学习 Verilog</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://zh.wikipedia.org/zh-cn/Verilog">Wiki-Verilog</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Verilog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我是怎么建立起这个博客的</title>
    <link href="/2021/12/11/%E6%88%91%E6%98%AF%E6%80%8E%E4%B9%88%E5%BB%BA%E7%AB%8B%E8%B5%B7%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%9A%84/"/>
    <url>/2021/12/11/%E6%88%91%E6%98%AF%E6%80%8E%E4%B9%88%E5%BB%BA%E7%AB%8B%E8%B5%B7%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<p>关于本站建立过程的一个<del>流水账</del>简单记录,GitPage+Hexo的免费博客建立方法</p><span id="more"></span><h1 id="如何免费建立一个自己的博客"><a href="#如何免费建立一个自己的博客" class="headerlink" title="如何免费建立一个自己的博客"></a>如何免费建立一个自己的博客</h1><p>不管是为了逃避无休止的内容审核，还是想要在互联网之中拥有自己的一亩三分地，或是单纯的想要一个很cooool的个人博客，这篇文章都能帮你从零搭建起一个属于自己的<strong>免费</strong>个人博客。</p><p>首先简单介绍一下需要使用的Github Page功能和Hexo静态博客框架，使用这两个技术的最大原因就是————不花钱。从技术上讲，Gitee同样提供GiteePage服务，不过按照个人习惯这里我们还是使用Github。</p><h2 id="关于GithubPage"><a href="#关于GithubPage" class="headerlink" title="关于GithubPage"></a>关于GithubPage</h2><h3 id="什么是GithubPage"><a href="#什么是GithubPage" class="headerlink" title="什么是GithubPage"></a>什么是GithubPage</h3><p>根据Github官方的介绍</p><blockquote><p>Websites for you and your projects.<br>Hosted directly from your GitHub repository. Just edit, push, and your changes are live.</p></blockquote><p>简而言之是一个使用Github仓库的<em>静态网页</em>托管服务，你可以在仓库里建立一个网站并通过固定的URL访问它。</p><h3 id="首次使用git"><a href="#首次使用git" class="headerlink" title="首次使用git"></a>首次使用git</h3><p>如果你首次安装git客户端，需要先将本地Git与Github账号绑定。右键打开Git Bash<br><img src="/img/howtobuildBlog/open_git_bash.png"><br>输入</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;你的GitHub用户名&quot;</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;你的GitHub注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>并且生成ssh密钥文件：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;你的GitHub注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>之后直接回车跳过所有选项，找到生成好的密钥文件。生成结束后就能看到这样的输出<br><img src="/img/howtobuildBlog/sha_sample.png"><br>可以看到公钥文件已经保存在了<code>/c/User/pc/.ssh/id_rsa.pub</code>里，用任意文本编辑工具就能打开。接着打开<a href="https://github.com/settings/keys">Github_Setting_Key</a>，新建一个SSH key，把刚才公钥部分<span class="label label-info">id_rsa.pub</span>里所有内容粘贴到Key文本框中，然后title随便取个名字，点击<span class="label label-info">Add SSH Key</span>保存。</p><p>之后在Git Bash中输入<code>ssh git@github.com</code>, 结果为:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">PTY allocation request failed <span class="hljs-keyword">on</span> channel <span class="hljs-number">0</span><br>Hi username! You&#x27;ve successfully authenticated, <span class="hljs-keyword">but</span> GitHub <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> provide shell access.<br>Connection <span class="hljs-keyword">to</span> github.com closed.<br></code></pre></td></tr></table></figure><p>就说明连接成功。<br>同时也有可能输出一大段文本，然后询问你:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Are you sure you want <span class="hljs-keyword">to</span> <span class="hljs-keyword">continue</span> connecting (<span class="hljs-literal">yes</span><span class="hljs-regexp">/no/</span>[fingerprint])? <br></code></pre></td></tr></table></figure><p>这种情况一般发生在第一次链接github的时候，无脑输入yes就完事了。</p><div class="note note-success">            <p><strong>TIP</strong><br>当前Github推出了新的Personal Access Token(PATs)功能，后续通过hexo提交页面时登录可能需要输入你的PAT，而不是你的密码。如果上传失败，仔细阅读报错就能发现是否需要PAT，并按照<a href="https://docs.github.com/cn/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"><strong>官方文档</strong></a>创建一个。</p>          </div><h3 id="那怎么才能用上呢"><a href="#那怎么才能用上呢" class="headerlink" title="那怎么才能用上呢"></a>那怎么才能用上呢</h3><ol><li>在Github里新建一个名为<span class="label label-info">username.github.io</span>的仓库，username是你的登陆时用的github用户名，而这个名字将会作为后续访问网页的URL。（这里用一个readme.md初始化一下免得一会没东西看）<div class="note note-warning">            <p>这里我使用的仓库名是kiritani_dore.github.io，如果格式不正确将会作为username.github.io的二级域名进行访问，即<code>username.github.io/repo_name</code></p>          </div></li><li>在新建好的仓库的Setting-Page中将源文件目标设置为main分支，并点击保存<br> <img src="/img/howtobuildBlog/setup_github_page.png"></li><li>这时在浏览器中访问之前的仓库名就能看到刚刚创建的README.md文件内容（现在你所看到的博客就是这样显示出来的）</li></ol><p>这样你就拥有了一个可以挂载博客的仓库</p><h2 id="关于Hexo"><a href="#关于Hexo" class="headerlink" title="关于Hexo"></a>关于Hexo</h2><h3 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h3><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。访问<a href="https://hexo.io/zh-cn/">Hexo</a>官网了解更多细节。</p><h3 id="很好，怎么让这玩意跑起来"><a href="#很好，怎么让这玩意跑起来" class="headerlink" title="很好，怎么让这玩意跑起来"></a>很好，怎么让这玩意跑起来</h3><p>在你安装好了Node.js、git（在hexo文档中都能找到下载），并且使用</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>安装好了hexo之后，运行指令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> npx hexo init &lt;folder&gt;<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> &lt;folder&gt;<br><span class="hljs-variable">$</span> npm install<br></code></pre></td></tr></table></figure><p>就能把hexo本体安装到指定目录（最好是新建一个空目录），完成后目录如下</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sqf">├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>后续所有的hexo指令，都是在上面初始化的目录中执行</p>          </div><p>之后输入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">npx hexo clean  <span class="hljs-regexp">//</span>建议在每一次生成之前都执行clean指令以避免不必要的错误<br>npx hexo g      <span class="hljs-regexp">//g</span>enerator 生成网页<br>npx hexo s      <span class="hljs-regexp">//</span> service 将网站运行在本地<br></code></pre></td></tr></table></figure><p>稍等一段时间后就可访问<code>localhost:4000</code>查看刚生成的网页。关于hexo常用指令，这里就不对<a href="https://hexo.io/zh-cn/docs/">官方文档</a>进行搬运了。</p><h3 id="如何推送到Git仓库"><a href="#如何推送到Git仓库" class="headerlink" title="如何推送到Git仓库"></a>如何推送到Git仓库</h3><p>首先需要将Hexo与Github仓库关联起来，打开站点配置文件<span class="label label-info">_config.yml</span></p><div class="note note-warning">            <p>一般我们称安装根目录下的<span class="label label-info">_config.yml</span>为<strong>站点配置文件</strong><br><br>称/theme目录下的<span class="label label-info">_config.yml</span>文件为<strong>主题配置文件</strong></p>          </div><p>找到deploy字段，修改为刚才创建的github仓库地址</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:kiridore/kiridore.github.io.git<br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure><div class="note note-success">            <p><strong>TIP</strong><br>这里使用SSH地址为了避免通过http上传大文件出现缓冲区不足无法正常关闭http链接的问题</p>          </div><p>这里是为了设置hexo上传网页的目标仓库，保存关闭后，使用指令安装Git部署插件：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>最后执行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">npx hexo clean</span><br><span class="hljs-attribute">npx hexo g</span><br><span class="hljs-attribute">npx hexo d</span> <br></code></pre></td></tr></table></figure><p>使用<code>npx hexo d</code>指令后会直接将本地的文档<strong>完全覆盖</strong>在线仓库中的内容，经历一段略显漫长的push环节，就能通过之前的git仓库名访问到刚刚上传好的hexo页面了。</p><h2 id="全部搞定了，然后呢"><a href="#全部搞定了，然后呢" class="headerlink" title="全部搞定了，然后呢"></a>全部搞定了，然后呢</h2><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>一来因为github提供的域名没法个性化，而来github.io域名已经被列入黑名单，所以还是买一个新的域名通过国内主流域名代理商（阿里云/腾讯云）做一个域名解析。</p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>默认主题毕竟不够炫酷，在hexo的官网能找到超过300个主题，绝大部分主题都拥有自己的展示网页（顺带一提本站使用的同样是官网上找到的fluid)。根据主题github页面提供的安装方式就能轻松的应用到自己的博客，甚至进行魔改。</p><h3 id="更多个性化"><a href="#更多个性化" class="headerlink" title="更多个性化"></a>更多个性化</h3><ol><li>在站点配置文件中修改基本的站点信息，其中所有条目官方都已经写好了对应注释，根据自己的需求进行修改即可。部分主题需要对站点配置文件进行特殊修改，详情参考主题说明文档。</li><li>我个人更喜欢干净整洁的页面，因此没有安装过多的插件，如有需要也可以在官方的<a href="https://hexo.io/plugins/">插件页面</a>寻找自己需要的插件。</li></ol><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>终于简单的将这次建站的整个流程记录了下来，中途踩的坑也在文中做了特别标注，希望这篇文章能帮助你在建立个人网站上节约不少时间，少走一些弯路，也希望我能一直持续的将这个博客更新下去。由于作者个人水平有限，文章中难免出现纰漏和步骤缺失，如果对文中步骤有误或难以理解，欢迎在评论区指出，我将尽快进行修正。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/">官方文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cocos2d-x 学习#1：环境搭建到创建工程</title>
    <link href="/2021/12/08/cocos2d-x%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-1/"/>
    <url>/2021/12/08/cocos2d-x%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-1/</url>
    
    <content type="html"><![CDATA[<p>在win10系统，使用VS2017进行配置，包括环境搭建与创建工程两个部分</p><span id="more"></span><h1 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h1><p>最近准备一个独立游戏项目，打算使用cocos2d-x作为引擎，没想到这个引擎最新版本居然是2019年更新而且仅支持vs2015（虽然我2017也成功用起来了，不知道后续会不会出现一些问题），这里记录一下在起步阶段踩的一些坑。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>在开始之前需要先在电脑上安装</p><ul><li>Visual Studio 2017（2015是官方推荐的，但是今年已经不提供下载）</li><li>Python 2.7.5+ （不知道为什么在这个python2都要停止支持的年代还要用python2）</li><li>Cmake （cocos2d-x4.0已经不再提供vs工程，转而全面使用cmake）</li></ul><p>之后就可以从官网下载本体，并解压到一个空目录。之后就可以使用Cmake指令开始构建工程，首先在刚刚解压出来的<span class="label label-default">cocos2d-x-4.0</span>新建一个build目录，否则构建出的文件会直接撒在根目录，非常难受。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">mkdir win32-build<br>cd win32-build<br></code></pre></td></tr></table></figure><p>然后在build目录内（上面已经转入了build）执行cmake代码构建项目</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cmake .. -G<span class="hljs-string">&quot;Visual Studio 15 2017&quot;</span> -Tv141<br></code></pre></td></tr></table></figure><p>这里需要注意-G参数引号内的部分是大小写敏感的，如果写错了cmake会有相应提示，也可以输入<code>cmake -G --help</code>查看帮助生成自己需要的IDE项目。并且生成对应项目必须已经安装了IDE，比如没法在没有安装vs2022的电脑上生成对应工程文件。<br><img src="/img/cocos2dlearning/vs2017build.png"><br>运行结束后即可在之前创建的build目录中看到刚刚生成的.sln文件，使用对应IDE打开（这里我用的vs2017）就能看到各项库文件和自带的五个示例项目。这里可以右键对应项目选择生成或设置项目设置为启动项目，就可以按F5直接开始编译运行，整个过程大概在5-10分钟，之后就可以在/bin目录里找到生成的.exe文件。</p><h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h2><p>在网上搜索到的直接使用Visual Studio新建项目的方法没法在我电脑上使用，只好选择用引擎自带的控制台工具生成，再用cmake构建工程。</p><p>在之前解压下来的cocos2d-x-4.0文件夹中，可以找到一个<span class="label label-default">setup.py</span>执行之后会自动安装cocos控制台并加入到环境变量，在控制台里输入<code>cocos -v</code>，显示</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cocos2d</span>-x-<span class="hljs-number">4</span>.<span class="hljs-number">0</span>    <br><span class="hljs-attribute">Cocos</span> Console <span class="hljs-number">2</span>.<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>即为安装成功，这时就可以使用对应的指令创建工程文件了，指令如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">cocos new <span class="hljs-tag">&lt;<span class="hljs-name">game</span> <span class="hljs-attr">name</span>&gt;</span> -p <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">identifier</span>&gt;</span> -l <span class="hljs-tag">&lt;<span class="hljs-name">language</span>&gt;</span> -d <span class="hljs-tag">&lt;<span class="hljs-name">location</span>&gt;</span><br></code></pre></td></tr></table></figure><p>比如这里我们使用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cocos new MyFirstGame -<span class="hljs-selector-tag">p</span> com<span class="hljs-selector-class">.Dore</span><span class="hljs-selector-class">.FirstGame</span> -l cpp -d D:\cocosProject<br></code></pre></td></tr></table></figure><p>就在目录生成了对应的工程文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gradle">    目录: D:\cocosProject\MyFirstGame<br><br><br>Mode                 LastWriteTime         Length Name<br>----                 -------------         ------ ----<br>d-----         <span class="hljs-number">2021</span><span class="hljs-regexp">/12/</span><span class="hljs-number">8</span>     <span class="hljs-number">20</span>:<span class="hljs-number">43</span>                Classes<br>d-----         <span class="hljs-number">2021</span><span class="hljs-regexp">/12/</span><span class="hljs-number">8</span>     <span class="hljs-number">20</span>:<span class="hljs-number">43</span>                cocos2d<br>d-----         <span class="hljs-number">2021</span><span class="hljs-regexp">/12/</span><span class="hljs-number">8</span>     <span class="hljs-number">20</span>:<span class="hljs-number">43</span>                proj.android<br>d-----         <span class="hljs-number">2021</span><span class="hljs-regexp">/12/</span><span class="hljs-number">8</span>     <span class="hljs-number">20</span>:<span class="hljs-number">43</span>                proj.ios_mac<br>d-----         <span class="hljs-number">2021</span><span class="hljs-regexp">/12/</span><span class="hljs-number">8</span>     <span class="hljs-number">20</span>:<span class="hljs-number">43</span>                proj.linux<br>d-----         <span class="hljs-number">2021</span><span class="hljs-regexp">/12/</span><span class="hljs-number">8</span>     <span class="hljs-number">20</span>:<span class="hljs-number">43</span>                proj.win32<br>d-----         <span class="hljs-number">2021</span><span class="hljs-regexp">/12/</span><span class="hljs-number">8</span>     <span class="hljs-number">20</span>:<span class="hljs-number">43</span>                Resources<br>-a----         <span class="hljs-number">2021</span><span class="hljs-regexp">/12/</span><span class="hljs-number">8</span>     <span class="hljs-number">20</span>:<span class="hljs-number">43</span>             <span class="hljs-number">72</span> .cocos-<span class="hljs-keyword">project</span>.json<br>-a----         <span class="hljs-number">2021</span><span class="hljs-regexp">/12/</span><span class="hljs-number">8</span>     <span class="hljs-number">20</span>:<span class="hljs-number">43</span>           <span class="hljs-number">5392</span> CMakeLists.txt<br></code></pre></td></tr></table></figure><p>生成之后再使用cmake同上面环境搭建部分一样进行构建即可</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/hunter_wyh/article/details/104377872">Cocos2dx-v4.0学习-使用CMake编译Cocos2d-4.0(For Visual Studio)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://docs.cocos.com/cocos2d-x/manual/zh/editors_and_tools/cocosCLTool.html">cocos官方文档</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>游戏引擎</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏引擎</tag>
      
      <tag>cocos2d</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
