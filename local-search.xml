<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>我是怎么建立起这个博客的</title>
    <link href="/2021/12/11/%E6%88%91%E6%98%AF%E6%80%8E%E4%B9%88%E5%BB%BA%E7%AB%8B%E8%B5%B7%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%9A%84/"/>
    <url>/2021/12/11/%E6%88%91%E6%98%AF%E6%80%8E%E4%B9%88%E5%BB%BA%E7%AB%8B%E8%B5%B7%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<p>关于本站建立过程的一个<del>流水账</del>简单记录,GitPage+Hexo的免费博客建立方法</p><span id="more"></span><h1 id="如何免费建立一个自己的博客"><a href="#如何免费建立一个自己的博客" class="headerlink" title="如何免费建立一个自己的博客"></a>如何免费建立一个自己的博客</h1><p>不管是为了逃避无休止的内容审核，还是想要在互联网之中拥有自己的一亩三分地，或是单纯的想要一个很cooool的个人博客，这篇文章都能帮你从零搭建起一个属于自己的<strong>免费</strong>个人博客。</p><p>首先简单介绍一下需要使用的Github Page功能和Hexo静态博客框架，使用这两个技术的最大原因就是————不花钱。从技术上讲，Gitee同样提供GiteePage服务，不过按照个人习惯这里我们还是使用Github。</p><h2 id="关于GithubPage"><a href="#关于GithubPage" class="headerlink" title="关于GithubPage"></a>关于GithubPage</h2><h3 id="什么是GithubPage"><a href="#什么是GithubPage" class="headerlink" title="什么是GithubPage"></a>什么是GithubPage</h3><p>根据Github官方的介绍</p><blockquote><p>Websites for you and your projects.<br>Hosted directly from your GitHub repository. Just edit, push, and your changes are live.</p></blockquote><p>简而言之是一个使用Github仓库的<em>静态网页</em>托管服务，你可以在仓库里建立一个网站并通过固定的URL访问它。</p><h3 id="首次使用git"><a href="#首次使用git" class="headerlink" title="首次使用git"></a>首次使用git</h3><p>如果你首次安装git客户端，需要先将本地Git与Github账号绑定。右键打开Git Bash<br><img src="/img/howtobuildBlog/open_git_bash.png"><br>输入</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;你的GitHub用户名&quot;</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;你的GitHub注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>并且生成ssh密钥文件：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;你的GitHub注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>之后直接回车跳过所有选项，找到生成好的密钥文件。接着打开<a href="https://github.com/settings/keys">Github_Setting_Key</a>，新建一个SSH key，把刚才公钥部分<span class="label label-info">id_rsa.pub</span>里所有内容粘贴到Key文本框中，然后title随便取个名字，点击<span class="label label-info">Add SSH Key</span>保存。</p><p>之后在Git Bash中输入<code>ssh git@github.com</code>, 结果为:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">PTY allocation request failed <span class="hljs-keyword">on</span> channel <span class="hljs-number">0</span><br>Hi username! You&#x27;ve successfully authenticated, <span class="hljs-keyword">but</span> GitHub <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> provide shell access.<br>Connection <span class="hljs-keyword">to</span> github.com closed.<br></code></pre></td></tr></table></figure><p>就说明连接成功。</p><div class="note note-success">            <p><strong>TIP</strong><br>当前Github推出了新的Personal Access Token(PATs)功能，后续通过hexo提交页面时登录可能需要输入你的PAT，而不是你的密码。如果上传失败，仔细阅读报错就能发现是否需要PAT，并按照<a href="https://docs.github.com/cn/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"><strong>官方文档</strong></a>创建一个。</p>          </div><h3 id="那怎么才能用上呢"><a href="#那怎么才能用上呢" class="headerlink" title="那怎么才能用上呢"></a>那怎么才能用上呢</h3><ol><li>在仓库里新建一个名为<span class="label label-info">username.github.io</span>的仓库，username是你的登陆时用的github用户名，而这个名字将会作为后续访问网页的URL。（这里用一个readme.md初始化一下免得一会没东西看）<div class="note note-warning">            <p>这里我使用的仓库名是kiritani_dore.github.io，如果格式不正确将会作为username.github.io的二级域名进行访问，即<code>username.github.io/repo_name</code></p>          </div></li><li>在新建好的仓库的Setting-Page中将源文件目标设置为main分支，并点击保存<br> <img src="/img/howtobuildBlog/setup_github_page.png"></li><li>这时在浏览器中访问之前的仓库名就能看到刚刚创建的README.md文件内容（现在你所看到的博客就是这样显示出来的）</li></ol><p>这样你就拥有了一个可以挂载博客的仓库</p><h2 id="关于Hexo"><a href="#关于Hexo" class="headerlink" title="关于Hexo"></a>关于Hexo</h2><h3 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h3><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。访问<a href="https://hexo.io/zh-cn/">Hexo</a>官网了解更多细节。</p><h3 id="很好，怎么让这玩意跑起来"><a href="#很好，怎么让这玩意跑起来" class="headerlink" title="很好，怎么让这玩意跑起来"></a>很好，怎么让这玩意跑起来</h3><p>在你安装好了Node.js、git（在hexo文档中都能找到下载），并且使用</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>安装好了hexo之后，运行指令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> npx hexo init &lt;folder&gt;<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> &lt;folder&gt;<br><span class="hljs-variable">$</span> npm install<br></code></pre></td></tr></table></figure><p>就能把hexo本体安装到指定目录（最好是新建一个空目录），完成后目录如下</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sqf">├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>后续所有的hexo指令，都是在上面初始化的目录中执行</p>          </div><p>之后输入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">npx hexo clean  <span class="hljs-regexp">//</span>建议在每一次生成之前都执行clean指令以避免不必要的错误<br>npx hexo g      <span class="hljs-regexp">//g</span>enerator 生成网页<br>npx hexo s      <span class="hljs-regexp">//</span> service 将网站运行在本地<br></code></pre></td></tr></table></figure><p>稍等一段时间后就可访问<code>localhost:4000</code>查看刚生成的网页。关于hexo常用指令，这里就不对<a href="https://hexo.io/zh-cn/docs/">官方文档</a>进行搬运了。</p><h3 id="如何推送到Git仓库"><a href="#如何推送到Git仓库" class="headerlink" title="如何推送到Git仓库"></a>如何推送到Git仓库</h3><p>首先需要将Hexo与Github仓库关联起来，打开站点配置文件<span class="label label-info">_config.yml</span></p><div class="note note-warning">            <p>一般我们称安装根目录下的<span class="label label-info">_config.yml</span>为<strong>站点配置文件</strong><br><br>称/theme目录下的<span class="label label-info">_config.yml</span>文件为<strong>主题配置文件</strong></p>          </div><p>找到deploy字段，修改为刚才创建的github仓库地址</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:kiridore/kiridore.github.io.git<br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure><div class="note note-success">            <p><strong>TIP</strong><br>这里使用SSH地址为了避免通过http上传大文件出现缓冲区不足无法正常关闭http链接的问题</p>          </div><p>这里是为了设置hexo上传网页的目标仓库，保存关闭后，使用指令安装Git部署插件：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>最后执行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">npx hexo clean</span><br><span class="hljs-attribute">npx hexo g</span><br><span class="hljs-attribute">npx hexo d</span> <br></code></pre></td></tr></table></figure><p>使用<code>npx hexo d</code>指令后会直接将本地的文档<strong>完全覆盖</strong>在线仓库中的内容，经历一段略显漫长的push环节，就能通过之前的git仓库名访问到刚刚上传好的hexo页面了。</p><h2 id="全部搞定了，然后呢"><a href="#全部搞定了，然后呢" class="headerlink" title="全部搞定了，然后呢"></a>全部搞定了，然后呢</h2><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>一来因为github提供的域名没法个性化，而来github.io域名已经被列入黑名单，所以还是买一个新的域名通过国内主流域名代理商（阿里云/腾讯云）做一个域名解析。</p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>默认主题毕竟不够炫酷，在hexo的官网能找到超过300个主题，绝大部分主题都拥有自己的展示网页（顺带一提本站使用的同样是官网上找到的fluid)。根据主题github页面提供的安装方式就能轻松的应用到自己的博客，甚至进行魔改。</p><h3 id="更多个性化"><a href="#更多个性化" class="headerlink" title="更多个性化"></a>更多个性化</h3><ol><li>在站点配置文件中修改基本的站点信息，其中所有条目官方都已经写好了对应注释，根据自己的需求进行修改即可。部分主题需要对站点配置文件进行特殊修改，详情参考主题说明文档。</li><li>我个人更喜欢干净整洁的页面，因此没有安装过多的插件，如有需要也可以在官方的<a href="https://hexo.io/plugins/">插件页面</a>寻找自己需要的插件。</li></ol><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>终于简单的将这次建站的整个流程记录了下来，中途踩的坑也在文中做了特别标注，希望这篇文章能帮助你在建立个人网站上节约不少时间，少走一些弯路，也希望我能一直持续的将这个博客更新下去。由于作者个人水平有限，文章中难免出现纰漏和步骤缺失，如果对文中步骤有误或难以理解，欢迎在评论区指出，我将尽快进行修正。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/">官方文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术 - 博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cocos2d-x学习记录#1</title>
    <link href="/2021/12/08/cocos2d-x%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-1/"/>
    <url>/2021/12/08/cocos2d-x%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-1/</url>
    
    <content type="html"><![CDATA[<p>在win10系统，使用VS2017进行配置，包括环境搭建与创建工程两个部分</p><span id="more"></span><h1 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h1><p>最近准备一个独立游戏项目，打算使用cocos2d-x作为引擎，没想到这个引擎最新版本居然是2019年更新而且仅支持vs2015（虽然我2017也成功用起来了，不知道后续会不会出现一些问题），这里记录一下在起步阶段踩的一些坑。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>在开始之前需要先在电脑上安装</p><ul><li>Visual Studio 2017（2015是官方推荐的，但是今年已经不提供下载）</li><li>Python 2.7.5+ （不知道为什么在这个python2都要停止支持的年代还要用python2）</li><li>Cmake （cocos2d-x4.0已经不再提供vs工程，转而全面使用cmake）</li></ul><p>之后就可以从官网下载本体，并解压到一个空目录。之后就可以使用Cmake指令开始构建工程，首先在刚刚解压出来的<span class="label label-default">cocos2d-x-4.0</span>新建一个build目录，否则构建出的文件会直接撒在根目录，非常难受。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">mkdir win32-build<br>cd win32-build<br></code></pre></td></tr></table></figure><p>然后在build目录内（上面已经转入了build）执行cmake代码构建项目</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cmake .. -G<span class="hljs-string">&quot;Visual Studio 15 2017&quot;</span> -Tv141<br></code></pre></td></tr></table></figure><p>这里需要注意-G参数引号内的部分是大小写敏感的，如果写错了cmake会有相应提示，也可以输入<code>cmake -G --help</code>查看帮助生成自己需要的IDE项目。并且生成对应项目必须已经安装了IDE，比如没法在没有安装vs2022的电脑上生成对应工程文件。<br><img src="/img/cocos2dlearning/vs2017build.png"><br>运行结束后即可在之前创建的build目录中看到刚刚生成的.sln文件，使用对应IDE打开（这里我用的vs2017）就能看到各项库文件和自带的五个示例项目。这里可以右键对应项目选择生成或设置项目设置为启动项目，就可以按F5直接开始编译运行，整个过程大概在5-10分钟，之后就可以在/bin目录里找到生成的.exe文件。</p><h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h2><p>在网上搜索到的直接使用Visual Studio新建项目的方法没法在我电脑上使用，只好选择用引擎自带的控制台工具生成，再用cmake构建工程。</p><p>在之前解压下来的cocos2d-x-4.0文件夹中，可以找到一个<span class="label label-default">setup.py</span>执行之后会自动安装cocos控制台并加入到环境变量，在控制台里输入<code>cocos -v</code>，显示</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cocos2d</span>-x-<span class="hljs-number">4</span>.<span class="hljs-number">0</span>    <br><span class="hljs-attribute">Cocos</span> Console <span class="hljs-number">2</span>.<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>即为安装成功，这时就可以使用对应的指令创建工程文件了，指令如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">cocos new <span class="hljs-tag">&lt;<span class="hljs-name">game</span> <span class="hljs-attr">name</span>&gt;</span> -p <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">identifier</span>&gt;</span> -l <span class="hljs-tag">&lt;<span class="hljs-name">language</span>&gt;</span> -d <span class="hljs-tag">&lt;<span class="hljs-name">location</span>&gt;</span><br></code></pre></td></tr></table></figure><p>比如这里我们使用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cocos new MyFirstGame -<span class="hljs-selector-tag">p</span> com<span class="hljs-selector-class">.Dore</span><span class="hljs-selector-class">.FirstGame</span> -l cpp -d D:\cocosProject<br></code></pre></td></tr></table></figure><p>就在目录生成了对应的工程文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gradle">    目录: D:\cocosProject\MyFirstGame<br><br><br>Mode                 LastWriteTime         Length Name<br>----                 -------------         ------ ----<br>d-----         <span class="hljs-number">2021</span><span class="hljs-regexp">/12/</span><span class="hljs-number">8</span>     <span class="hljs-number">20</span>:<span class="hljs-number">43</span>                Classes<br>d-----         <span class="hljs-number">2021</span><span class="hljs-regexp">/12/</span><span class="hljs-number">8</span>     <span class="hljs-number">20</span>:<span class="hljs-number">43</span>                cocos2d<br>d-----         <span class="hljs-number">2021</span><span class="hljs-regexp">/12/</span><span class="hljs-number">8</span>     <span class="hljs-number">20</span>:<span class="hljs-number">43</span>                proj.android<br>d-----         <span class="hljs-number">2021</span><span class="hljs-regexp">/12/</span><span class="hljs-number">8</span>     <span class="hljs-number">20</span>:<span class="hljs-number">43</span>                proj.ios_mac<br>d-----         <span class="hljs-number">2021</span><span class="hljs-regexp">/12/</span><span class="hljs-number">8</span>     <span class="hljs-number">20</span>:<span class="hljs-number">43</span>                proj.linux<br>d-----         <span class="hljs-number">2021</span><span class="hljs-regexp">/12/</span><span class="hljs-number">8</span>     <span class="hljs-number">20</span>:<span class="hljs-number">43</span>                proj.win32<br>d-----         <span class="hljs-number">2021</span><span class="hljs-regexp">/12/</span><span class="hljs-number">8</span>     <span class="hljs-number">20</span>:<span class="hljs-number">43</span>                Resources<br>-a----         <span class="hljs-number">2021</span><span class="hljs-regexp">/12/</span><span class="hljs-number">8</span>     <span class="hljs-number">20</span>:<span class="hljs-number">43</span>             <span class="hljs-number">72</span> .cocos-<span class="hljs-keyword">project</span>.json<br>-a----         <span class="hljs-number">2021</span><span class="hljs-regexp">/12/</span><span class="hljs-number">8</span>     <span class="hljs-number">20</span>:<span class="hljs-number">43</span>           <span class="hljs-number">5392</span> CMakeLists.txt<br></code></pre></td></tr></table></figure><p>生成之后再使用cmake同上面环境搭建部分一样进行构建即可</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/hunter_wyh/article/details/104377872">Cocos2dx-v4.0学习-使用CMake编译Cocos2d-4.0(For Visual Studio)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://docs.cocos.com/cocos2d-x/manual/zh/editors_and_tools/cocosCLTool.html">cocos官方文档</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术 - 游戏引擎</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏引擎</tag>
      
      <tag>cocos2d</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
